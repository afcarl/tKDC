#ifndef BUCKETHASHING_INCLUDED
#define BUCKETHASHING_INCLUDED

#define UH_PRIME_DEFAULT 4294967291U
typedef struct _BucketEntryT {
  //PPointT point;
  Int32T pointIndex;
  _BucketEntryT *nextEntry;
} BucketEntryT, *PBucketEntryT;

typedef struct _GBucketT {
  // These controlValues are used instead of the full k-vector (value
  // of the hash function g) describing the bucket. With a high
  // probability all buckets will have different pairs of
  // controlValues.
  Uns32T controlValue1;

  // The bucket entries (stored in a linked list).
  BucketEntryT firstEntry;
  _GBucketT *nextGBucketInChain;
} GBucketT, *PGBucketT;

typedef struct _UHashStructureT {

	 // The size of hashTable.
	Int32T hashTableSize;


	// Number of elements(buckets) stored in the hash table in total (that
  	// is the number of non-empty buckets).
  	Int32T nHashedBuckets;
	
	Int32T nHashedPoints;

	PGBucketT *llHashTable;
	// Unused (but allocated) instances of the corresponding
	// structs. May be reused if needed (instead of allocated new
  	// memory).
  	PGBucketT unusedPGBuckets;
  	PBucketEntryT unusedPBucketEntrys;

	// The main hash function (that defines the index
	Uns32T *mainHashA;

	// Control hash functions: used to compute/check the <controlValue>s
  	// of <GBucket>s.
  	// The type of the hash function is: h_{a}(k) = (a\cdot k)mod p
  	Uns32T *controlHash1;
	RealT t;
} UHashStructureT, *PUHashStructureT;

PUHashStructureT newUHashStructure(Int32T hashTableSize,RealT t);

void clearUHashStructure(PUHashStructureT uhash);
void freeUHashStructure(PUHashStructureT uhash);
void addBucketEntry(IntT pIndex, IntT i, PUHashStructureT uhash, PPointT point,RealT *min, RealT *max, IntT ptsDimension, IntT nPoints);
void printHashBucket(PUHashStructureT uhash, IntT hashtablesize);
#endif

